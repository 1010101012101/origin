#%RAML 0.8
# vim: set ft=yaml:
baseUri: http://server/broker/rest
title: OpenShift 3
version: v1beta1
mediaType: application/json
documentation:
 - title: Overview
   content: !include doc/overview.md
/projects:
  get:
    description: |
      List all projects for your account.

      Projects are a similar concept to v2 domains. A project is a grouping of services
      with shared access control and resource limits. Applications can be assembled
      from services in a project by linking them together via service endpoints.
    responses:
      200:
        body:
          example: !include examples/project-list.json
  post:
    description: Create a new project
    body:
      example: !include examples/project.json

/project/{projectID}:
    get:
      description: Get a specific project
      responses:
        200:
          body:
            example: !include examples/project.json
    put:
      description: Update a project
      body:
        example: !include examples/project-put.json
    delete:
      description: Delete a project
      responses:
        200:
          body:
            example: !include examples/status-success.json
    post:
      description: Instantiate a template in the given project
      body:
        example: !include examples/project-post.json

/imageRepositories:
  get:
    description: |
      Lists all image repositories.

      An image repository is a collection of images that share the same metadata. It may
      reference a Docker image repository on a Docker registry, but this is optional. An
      image repository also contains a mapping of tags to images.
    responses:
      200:
        body:
          example: !include examples/image-repositories.json
  post:
    description: Create a new image repository
    body:
      example: !include examples/create-image-repository.json

/imageRepositories/{repositoryID}:
    get:
      description: Get information about an image repository
      body:
        example: !include examples/image-repository.json
    put:
      description: Update an image repository
      body:
        example: !include examples/image-repository.json
    delete:
      description: Delete an image repository
      responses:
        200:
          body:
            example: !include examples/status-success.json
/images:
  get:
    description: |
      Lists all images.

      An image is a reference to an image in a Docker image repository on a Docker
      registry, plus a set of metadata. The metadata that Openshift stores for an image
      will augment the metadata that has already been specified in the image through
      its Dockerfile.
    responses:
      200:
        body:
          example: !include examples/images.json
  post:
    description: Create a new image definition
    body:
      example: !include examples/create-image.json

/images/{imageID}:
    get:
      description: Get image definition
      body:
        example: !include examples/image.json
    delete:
      description: Delete an image
      responses:
        200:
          body:
            example: !include examples/status-success.json

/imageRepositoryMappings:
  post:
    description: |
      Creates an image and updates an image repository.

      This is designed as a webhook that a Docker registry can invoke when a
      new tag is created. The image repository mapping contains a reference
      to the repository, the image's metadata, and the name of the new tag.
      Upon execution, a new image is created if it doesn't already exist, and
      the image repository is updated with the new tag.
    body:
      example: !include examples/create-image-repository-mapping.json

/services:
  get:
    description: |
      Lists all services that your account has access to

      Services can be public or owned by a project. They contain a template of a pod and
      reference image repositories that supply the images for those templates. A service may
      be configured to react to an image being pushed to an image repository by initiating a
      deployment. Deployments are associated with a service and make use of
      Kubernetes replication controllers to manage pods in a cluster.
      For deployments, a service contains a policy that constrains how deployments can occur.
      For example, it may require that there exist at least 2 operational pods at all times.
      A deployment needs to operate under those constraints when making changes.
    queryParameters:
      projectId:
        description: filter the services owned by a particular project
    responses:
      200:
        body:
          example: !include examples/services.json
  post:
    description: Create a new service
    body:
      example: !include examples/create-service.json
/service/{serviceID}:
    get:
      description: Get a specific service definition
      body:
        example: !include examples/service.json
    put:
      description: Update a service
      body:
        example: !include examples/service.json
    delete:
      description: Delete a service
      responses:
        200:
          body:
            example: !include examples/status-success.json
    /environment-variables:
      get:
        description: Environment variables associated with this service
        responses:
          200:
            body:
              example: !include examples/envvars.json
      post:
        description: Create/update environment variables
        body:
          example: !include examples/envvars.json
      /{variableName}:
        get:
          description: Get environment variable
          body:
            example: !include examples/envvar.json
        put:
          description: Update an environment variable's value
          body:
            example: !include examples/envvar.json
        delete:
          description: Delete an environment variable
          responses:
            200:
              body:
                example: !include examples/status-success.json
/deployments:
  get:
    description: |
      Lists active deployments in the current project

      Deployments effect change in a service such as scaling up, down, updating the
      current image, etc. Deployments may use different policies for carrying out
      the change. For example, a rolling update with a single pod change at a time, or
      a batch update, etc. Deployments make use of Kubernetes replicationControllers
      to bring about the changes.
    responses:
      200:
        body:
          example: !include examples/deployments.json
  post:
    description: Create a new deployment
    body:
      example: !include examples/create-deployment.json
/deployment/{deploymentID}:
  get:
    description: Get deployment details
    body:
      example: !include examples/deployment.json
/links:
  get:
    description: |
      List of links between services in your account

      Unlike a Docker link, a Link in OpenShift defines a relationship between services
      which may be composed by multiple Docker images. A link may include additional metadata
      about the relationship such as the algorithm to use to distribute requests.
    queryParameters:
      projectId:
        description: filter the links owned by a particular project
      serviceId:
        description: filter the links attached to a particular service
    responses:
      200:
        body:
          example: !include examples/links.json
  post:
    description: Create a new link between this service and a different service
    body:
      example: !include examples/link.json
/link/{linkID}:
  get:
    description: Get link details
    body:
      example: !include examples/link.json
  put:
    description: Update a link
    body:
      example: !include examples/link.json
  delete:
    description: Delete a link
    responses:
      200:
        body:
          example: !include examples/status-success.json
/aliases:
  get:
    description: |
      List all aliases visible to you

      Aliases in v3 perform the same function as aliases in v2. The main difference
      is that in v3 an alias is associated with a service, not an application.
    queryParameters:
      serviceId:
        description: filter aliases by associated service
    responses:
      200:
        body:
          example: !include examples/aliases.json
  post:
    description: Create an alias for this service
    body:
      example: !include examples/alias.json
/alias/{aliasID}:
  get:
    description: Get alias
    body:
      example: !include examples/alias.json
  put:
    description: Update an alias
    body:
      example: !include examples/alias.json
  delete:
    description: Delete an alias
    responses:
      200:
        body:
          example: !include examples/status-success.json
/builds:
  get:
    description: |
      Retrieves a list of builds

      Build encapsulates the inputs needed to produce a new deployable image, as well as
      the status of the operation and a reference to the Pod which runs the build.
    responses:
      200:
        body:
          example: !include examples/builds.json
  post:
    description: Create a new build
    body:
      example: !include examples/create_build.json
/builds/{buildId}:
  get:
    description: Retrieve a single build definition
    responses:
      200:
        body:
          example: !include examples/build.json
  put:
    description: Update a build definition
    body:
      example: !include examples/build.json
  delete:
    description: Delete a build definition
    responses:
      200:
        body:
          example: !include examples/status-success.json
/buildConfigs:
  get:
    description: |
      Retrieves a list of BuildConfigs

      BuildConfig contains the inputs needed to produce a new deployable image
    responses:
      200:
        body:
          example: !include examples/buildConfigs.json
  post:
    description: Create a new build
    body:
      example: !include examples/create_buildConfig.json

/buildConfigs/{configId}:
  get:
    description: Retrieve a build configuration
    responses:
      200:
        body:
          example: !include examples/buildConfig.json
  put:
    description: Update a build configuration
    body:
      example: !include examples/buildConfig.json
  delete:
    description: Delete a build configuration
    responses:
      200:
        body:
          example: !include examples/status-success.json
/buildConfigHooks/{buildId}/{secret}/{plugin}:
  post:
    description: |
      Webhook on push event from external repository

      buildId specifies which build to trigger, whereas plugin defines source of
      the request, this might be github, bitbucket or others.
    responses:
      204:
        description: No content

/templates:
  get:
    description: |
      Lists all templates that your account has access to

      A template defines 0..n services and 0..m links. When it is applied
      to an existing project, those services and links are instantiated for
      that project.
    responses:
      200:
        body:
          example: !include examples/templates.json
  post:
    description: Create a new template
    body:
      example: !include examples/template.json
/template/{templateID}:
  get:
    description: Get a specific template
    body:
      example: !include examples/template.json
  put:
    description: Update a template
    body:
      example: !include examples/template.json
  delete:
    description: Delete a template
    responses:
      200:
        body:
          example: !include examples/status-success.json
/pods:
  get:
    description: List all pods on this cluster
    responses:
      200:
        body:
          example: !include examples/pod-list.json
  post:
    description: Create a new pod. currentState is ignored if present.
    body:
      schema: !include doc/pod-schema.json
      example: !include examples/pod.json

  /{podId}:
    get:
      description: Get a specific pod
      responses:
        200:
          body:
            example: !include examples/pod.json
    put:
      description: Update a pod
      body:
        schema: !include doc/pod-schema.json
        example: !include examples/pod.json
    delete:
      description: Delete a specific pod
      responses:
        200:
          body:
            example: !include examples/status-success.json

/replicationControllers:
  get:
    description: List all replicationControllers on this cluster
    responses:
      200:
        body:
          example: !include examples/controller-list.json
  post:
    description: Create a new controller. currentState is ignored if present.
    body:
      schema: !include doc/controller-schema.json
      example: !include examples/controller.json

  /{controllerId}:
    get:
      description: Get a specific controller
      responses:
        200:
          body:
            example: !include examples/controller.json
    put:
      description: Update a controller
      body:
        schema: !include doc/controller-schema.json
        example: !include examples/controller.json
    delete:
      description: Delete a specific controller
      responses:
        200:
          body:
            example: !include examples/status-success.json

/lbservices:
  get:
    description: List all services on this cluster
    responses:
      200:
        body:
          example: !include examples/service-list.json
  post:
    description: Create a new service
    body:
      schema: !include doc/service-schema.json
      example: !include examples/lbservice.json

  /{serviceId}:
    get:
      description: Get a specific service
      responses:
        200:
          body:
            example: !include examples/service.json
    put:
      description: Update a service
      body:
        schema: !include doc/service-schema.json
        example: !include examples/service.json
    delete:
      description: Delete a specific service
      responses:
        200:
          body:
            example: !include examples/status-success.json
